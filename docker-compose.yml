services:
  # ========================================
  # SERVICIOS BACKEND
  # ========================================
  
  ai-ticket-processor:
    build:
      context: ./modules/backend/ai-ticket-processor
      dockerfile: Dockerfile
    container_name: tfg_ai_ticket_processor
    restart: unless-stopped
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PORT=${AI_TICKET_PROCESSOR_PORT:-8004}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - ./modules/backend/ai-ticket-processor/images:/app/images:ro
    ports:
      - "${AI_TICKET_PROCESSOR_PORT:-8004}:8004"
    networks:
      - tfg_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ticket-service:
    build:
      context: ./modules/backend/ticket-service
      dockerfile: Dockerfile
    container_name: tfg_ticket_service
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - HOST=0.0.0.0
      - PORT=8003
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=10485760
      - AUTH_SERVICE_URL=http://auth-service:8001
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_DUPLICATE_DETECTION=${ENABLE_DUPLICATE_DETECTION:-true}
    volumes:
      - ticket_uploads:/app/uploads
    ports:
      - "${TICKET_SERVICE_PORT:-8003}:8003"
    networks:
      - tfg_network
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: ./modules/backend/main-backend
      dockerfile: Dockerfile
    container_name: tfg_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - AUTH_SERVICE_URL=http://auth-service:8001
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - tfg_network
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-service:
    build:
      context: ./modules/backend/auth-service
      dockerfile: Dockerfile
    container_name: tfg_auth_service
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
    ports:
      - "${AUTH_SERVICE_PORT:-8001}:8001"
    networks:
      - tfg_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  gamification-service:
    build:
      context: ./modules/backend/gamification-service
      dockerfile: Dockerfile
    container_name: tfg_gamification_service
    restart: unless-stopped
    environment:
      - GAMIFICATION_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - HOST=0.0.0.0
      - PORT=8005
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "${GAMIFICATION_SERVICE_PORT:-8005}:8005"
    networks:
      - tfg_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  crm-service:
    build:
      context: ./modules/backend/crm-service
      dockerfile: Dockerfile
    container_name: tfg_crm_service
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - HOST=0.0.0.0
      - PORT=8006
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - AUTH_SERVICE_URL=http://auth-service:8001
      - OLLAMA_HOST=http://ollama:11434
      - LLM_MODEL=qwen2.5:0.5b-instruct
      - NOTIFICATION_SENDER_URL=http://notification-sender:8007
    ports:
      - "${CRM_SERVICE_PORT:-8006}:8006"
    networks:
      - tfg_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  notification-sender:
    build:
      context: ./modules/backend/notification-sender
      dockerfile: Dockerfile
    container_name: tfg_notification_sender
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - HOST=0.0.0.0
      - PORT=8007
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY:-}
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY:-}
      - VAPID_EMAIL=${VAPID_EMAIL:-noreply@mercat.com}
    ports:
      - "${NOTIFICATION_SENDER_PORT:-8007}:8007"
    networks:
      - tfg_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================
  # FRONTEND
  # ========================================
  
  frontend:
    build:
      context: ./modules/frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT}
    container_name: tfg_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - tfg_network
    depends_on:
      - backend
      - auth-service
      - ticket-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================
  # BASE DE DATOS
  # ========================================
  
  postgres:
    build:
      context: ./modules/databases/postgres
      dockerfile: Dockerfile
    container_name: tfg_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./modules/databases/postgres/logs:/var/lib/postgresql/log
    networks:
      - tfg_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticket_user -d ticket_analytics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tfg_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ticketanalytics.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - tfg_network
    depends_on:
      - postgres

  # ========================================
  # IA (Ollama)
  # ========================================
  ollama:
    image: ollama/ollama:latest
    container_name: tfg_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - tfg_network

# ========================================
# REDES
# ========================================
networks:
  tfg_network:
    driver: bridge

# ========================================
# VOLÃšMENES
# ========================================
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  ticket_uploads:
    driver: local 
  ollama_data:
    driver: local
