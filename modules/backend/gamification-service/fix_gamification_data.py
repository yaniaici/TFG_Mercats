#!/usr/bin/env python3
"""
Script para verificar y corregir los datos de gamificaci√≥n existentes.
Asegura que solo los tickets v√°lidos (de tiendas del mercado) cuenten para los puntos.
"""

import sys
import os
import requests
import json
from datetime import datetime
from typing import List, Dict, Any

# Configuraci√≥n
TICKET_SERVICE_URL = "http://ticket-service:8003"
GAMIFICATION_SERVICE_URL = "http://gamification-service:8005"

def get_all_tickets() -> List[Dict[str, Any]]:
    """Obtener todos los tickets del sistema"""
    try:
        response = requests.get(f"{TICKET_SERVICE_URL}/tickets/")
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Error obteniendo tickets: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Error conectando con ticket service: {e}")
        return []

def get_user_gamification_stats(user_id: str) -> Dict[str, Any]:
    """Obtener estad√≠sticas de gamificaci√≥n de un usuario"""
    try:
        response = requests.get(f"{GAMIFICATION_SERVICE_URL}/users/{user_id}/stats")
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Error obteniendo stats de gamificaci√≥n para {user_id}: {response.status_code}")
            return {}
    except Exception as e:
        print(f"‚ùå Error conectando con gamification service: {e}")
        return {}

def recalculate_user_gamification(user_id: str, tickets: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Recalcular la gamificaci√≥n de un usuario bas√°ndose en sus tickets"""
    print(f"\nüîÑ Recalculando gamificaci√≥n para usuario {user_id}")
    
    # Filtrar tickets del usuario
    user_tickets = [t for t in tickets if t.get('user_id') == user_id]
    print(f"   üìã Tickets encontrados: {len(user_tickets)}")
    
    # Contadores
    total_tickets = 0
    valid_tickets = 0
    total_spent = 0.0
    total_experience = 0
    
    # Procesar cada ticket
    for ticket in user_tickets:
        processing_result = ticket.get('processing_result', {})
        
        # Verificar si es un ticket v√°lido
        is_valid = (
            processing_result.get('procesado_correctamente', False) and 
            processing_result.get('tienda') and 
            processing_result.get('es_tienda_mercado', False)
        )
        
        total_tickets += 1
        
        if is_valid:
            valid_tickets += 1
            
            # Calcular experiencia
            experience_gained = 50  # Base por ticket v√°lido
            
            # Bonus por cantidad gastada
            total_amount = processing_result.get('total')
            if total_amount:
                try:
                    amount = float(total_amount)
                    total_spent += amount
                    if amount > 50:
                        bonus = int(amount / 10)  # 1 XP por cada 10‚Ç¨
                        experience_gained += bonus
                except (ValueError, TypeError):
                    pass
            
            total_experience += experience_gained
            
            print(f"   ‚úÖ Ticket v√°lido: {processing_result.get('tienda')} - {experience_gained} XP")
        else:
            print(f"   ‚ùå Ticket inv√°lido: {processing_result.get('tienda', 'Sin tienda')} - 0 XP")
    
    # Calcular nivel basado en experiencia
    level = 1
    for lvl, exp_required in {
        1: 0, 2: 100, 3: 250, 4: 450, 5: 700, 6: 1000, 7: 1350, 8: 1750, 9: 2200, 10: 2700
    }.items():
        if total_experience >= exp_required:
            level = lvl
    
    return {
        "user_id": user_id,
        "level": level,
        "experience": total_experience,
        "total_tickets": total_tickets,
        "valid_tickets": valid_tickets,
        "total_spent": total_spent,
        "recalculated": True
    }

def update_user_gamification(user_id: str, new_stats: Dict[str, Any]) -> bool:
    """Actualizar las estad√≠sticas de gamificaci√≥n de un usuario"""
    try:
        # Primero, resetear el perfil del usuario
        reset_response = requests.post(f"{GAMIFICATION_SERVICE_URL}/users/{user_id}/reset")
        
        # Luego, a√±adir la experiencia correcta
        if new_stats['experience'] > 0:
            response = requests.post(
                f"{GAMIFICATION_SERVICE_URL}/users/{user_id}/add-experience",
                params={
                    "experience_gained": new_stats['experience'],
                    "reason": "Recalibraci√≥ de dades de gamificaci√≥"
                }
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ Gamificaci√≥n actualizada: {new_stats['experience']} XP")
                return True
            else:
                print(f"   ‚ùå Error actualizando gamificaci√≥n: {response.status_code}")
                return False
        else:
            print(f"   ‚ö†Ô∏è No hay experiencia para a√±adir")
            return True
            
    except Exception as e:
        print(f"   ‚ùå Error actualizando gamificaci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîß SCRIPT DE CORRECCI√ìN DE DATOS DE GAMIFICACI√ìN")
    print("=" * 50)
    
    # Verificar conectividad
    print("üîç Verificando conectividad con servicios...")
    
    try:
        ticket_health = requests.get(f"{TICKET_SERVICE_URL}/health")
        gamification_health = requests.get(f"{GAMIFICATION_SERVICE_URL}/health")
        
        if ticket_health.status_code != 200 or gamification_health.status_code != 200:
            print("‚ùå Los servicios no est√°n disponibles")
            return
        
        print("‚úÖ Servicios disponibles")
    except Exception as e:
        print(f"‚ùå Error verificando servicios: {e}")
        return
    
    # Obtener todos los tickets
    print("\nüìã Obteniendo tickets del sistema...")
    tickets = get_all_tickets()
    
    if not tickets:
        print("‚ùå No se encontraron tickets")
        return
    
    print(f"‚úÖ {len(tickets)} tickets encontrados")
    
    # Obtener usuarios √∫nicos
    user_ids = list(set(t.get('user_id') for t in tickets if t.get('user_id')))
    print(f"üë• {len(user_ids)} usuarios √∫nicos encontrados")
    
    # Procesar cada usuario
    corrected_count = 0
    error_count = 0
    
    for user_id in user_ids:
        try:
            # Obtener estad√≠sticas actuales
            current_stats = get_user_gamification_stats(user_id)
            
            # Recalcular estad√≠sticas correctas
            correct_stats = recalculate_user_gamification(user_id, tickets)
            
            # Comparar y actualizar si es necesario
            if (current_stats.get('experience', 0) != correct_stats['experience'] or
                current_stats.get('valid_tickets', 0) != correct_stats['valid_tickets']):
                
                print(f"   üîÑ Datos incorrectos detectados, actualizando...")
                print(f"      Experiencia actual: {current_stats.get('experience', 0)}")
                print(f"      Experiencia correcta: {correct_stats['experience']}")
                print(f"      Tickets v√°lidos actuales: {current_stats.get('valid_tickets', 0)}")
                print(f"      Tickets v√°lidos correctos: {correct_stats['valid_tickets']}")
                
                if update_user_gamification(user_id, correct_stats):
                    corrected_count += 1
                else:
                    error_count += 1
            else:
                print(f"   ‚úÖ Datos correctos para usuario {user_id}")
                
        except Exception as e:
            print(f"   ‚ùå Error procesando usuario {user_id}: {e}")
            error_count += 1
    
    # Resumen final
    print(f"\nüìä RESUMEN:")
    print(f"   Usuarios procesados: {len(user_ids)}")
    print(f"   Usuarios corregidos: {corrected_count}")
    print(f"   Errores: {error_count}")
    print(f"   ‚úÖ Proceso completado")

if __name__ == "__main__":
    main() 